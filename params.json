{
  "name": "Orca CI, Gentoo Continuous Build and Stabilization Engine",
  "tagline": "All the code written as part of Google Summer of Code 2016.",
  "body": "# Google Summer Of Code '16\r\n[![Join the chat at https://gitter.im/pallavagarwal07/SummerOfCode16](https://badges.gitter.im/pallavagarwal07/SummerOfCode16.svg)](https://gitter.im/pallavagarwal07/SummerOfCode16?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n**ALL the commits in this repository, as well as all the pushes to the\r\nfollowing docker repositories was done as a part of Google Summer of Code\r\n2016**\r\n- https://hub.docker.com/r/pallavagarwal07/gentoo-stabilization/\r\n- https://hub.docker.com/r/pallavagarwal07/testimages/\r\n\r\n## Goal\r\nGentoo is an operating system with extreme focus on configurability and\r\nperformance.  To provide fully customizable experience, without interfering\r\nwith the stability of the system, Gentoo has a concept of masked packages.\r\nThese masked packages (or versions) are either untested, or are known to be\r\nunstable and are installed only if the user explicitly unmasks them. While this\r\nconcept is a boon to the stability of the operating system, the current\r\nimplementation requires the packages to be tested manually by a team of\r\ndevelopers. This significantly increases the time in which new packages are\r\nmade safely available to the users. The goal of this project is to provide a\r\nmechanism to test and stabilize the packages automatically with little or no\r\nhuman intervention.\r\n\r\n## Result\r\nDuring this project, I built Orca, a continuous build and stabilization engine\r\nthat automatically tries to find out the packages with broken dependencies, or\r\ncode. Not just that, it is possible for any user to install the stabilization\r\nclient to help in the stabilization process, and all the result of the\r\nstabilization calls is stored at a single place on the server.\r\n\r\n## Usage:\r\n### TL;DR\r\nYou can help in the stabilization of Gentoo packages by downloading the file\r\n`wrapper.sh` from the repository, and running it. Please note that you need\r\ndocker installed to use the stabilization container.\r\n\r\nIf you are on Gentoo Operating system, you can use the ebuild in the folder\r\n`utilities/ebuilds/`. This ebuild will be added to the Gentoo Portage tree as\r\nsoon as the backward incompatible changes to the server are done, since the\r\nebuild may not be fit to use just now.\r\n\r\n## Methodology\r\nOftentimes it is valuable to know if a package is failing to build, even if the\r\nexact reason for the failure is not know. The whole of Orca is built on this\r\nmindset, with the main task of indicating an error if it exists instead of\r\ntrying to figure out why it exists.\r\n\r\nOrca consists of two parts. The server and the client. Both play a really\r\nimportant role in the stabilization process.\r\n\r\n### Server:\r\nThe server is responsible of maintaining a database of all the packages that\r\nhave to be or have been stabilized. But it isn't enough to just have all the\r\npackages in a dump. A package cannot be stabilized until all its dependencies\r\nhave been stabilized.\r\n\r\nTo get around this problem, the server maintains a tree type structure of all\r\npackages. Obviously, the dependencies occur as children in the tree. Doing this\r\nisn't as easy at it seems, because packages often have circular dependencies.\r\nWhile the server, to function properly needs a Directed Acyclic Graph. Consider\r\nthe following:\r\n\r\n```\r\n                                                                               \r\n                                    A                                          \r\n                                  /   \\                                        \r\n                                 ↙     ↘                                       \r\n                                B       C                                      \r\n                               / \\                                             \r\n                              ↙   ↘                                            \r\n                             D     C                                           \r\n                            /                                               \r\n                           ↙                                          \r\n                          A                                                    \r\n```                                                                               \r\n\r\nThere are two repetitions in the above graph, `A` and `C`. However `C` doesn't\r\nactually give us any trouble. Because the tree still remains acyclic (since it\r\nis directed). However, the chain `A->B->D->A` forms a directed cycle. To\r\nresolve such cycles, the server replace one of the nodes with a new \"fake\"\r\nnode. This makes the above tree.\r\n\r\n```\r\n                                                                               \r\n                                    A                                          \r\n                                  /   \\                                        \r\n                                 ↙     ↘                                       \r\n                                B       C                                      \r\n                               / \\                                             \r\n                              ↙   ↘                                            \r\n                             D     C                                           \r\n                            /                                               \r\n                           ↙                                          \r\n                          A*                                                    \r\n```                                                                               \r\n\r\nThis again makes the graph acyclic. Starred nodes are assumed to be stable\r\n(i.e.  the fake nodes, not the top level `A` node) and are never sent for\r\nstabilization.\r\n\r\nIn the resulting graph, the server looks for a leaf node, and sends it for\r\nstabilization.\r\n\r\n## USE flags and combinations\r\nFind the main article [HERE](https://www.varstack.com/2016/05/13/SAT-Solver/)\r\n\r\nGentoo Packages are not all built with the same settings, and the users have\r\nthe ability to customize their build with a variety of USE flags (like on-off\r\nswitches for various features). This gives the users unparalleled control, and\r\nis one of the most inviting features of the Gentoo Operating System.\r\n\r\nHowever, the USE flags also make it very difficult to test the packages of\r\nbugs, because for `n` USE flags, there are literally `2^n` different ways to\r\nbuild the package. The server takes a shortcut, and builds each package with at\r\nmost 4 different combinations of USE flags.\r\n\r\n1. Min number of USE flags possible\r\n2. Max number of USE flags possible\r\n3. Random combination not present in above two\r\n4. Random combination not present in above three\r\n\r\nSome of the USE flag combinations given by the above rules may not be legal.\r\nFor example, if an ebuild specifies `REQUIRED_USE=\"^^ (a b c)\"` then EXACTLY\r\none flag out of `a`, `b`, and `c` should be enabled. This doesn't fall under\r\n\"without USE flags\" or \"with all USE flags\" category.\r\n\r\nSo, the server instead of choosing the flags randomly, also needs to calculate\r\nthe flag combinations that are legal for that package. Server does this by\r\nmodelling the `REQUIRED_USE` constraint as a boolean satisfiability problem.\r\nAfter solving the satisfiability problem with a SAT solver, it finds\r\ncombinations that are allowed by the ebuild to prevent errors due to this\r\ncause.\r\n\r\n## Server Architecture\r\nThe server uses Kubernetes for orchestration. The server runs three primary\r\ncontainers. The \"Server\", \"Flag Generator\" and \"Dependency Solver\". There is\r\nalso a mongoDB container which stores all of the information for the dependency\r\ngraph.\r\n\r\nA Kubernetes Service surrounds each of \"Flag Generator\" and \"Dependency Solver\" \r\nwhich means that multiple containers of each can hide behind those services and\r\na load balancer would distribute the incoming requests to the containers.\r\n\r\n![Server Architecture diagram](https://github.com/pallavagarwal07/SummerOfCode16/raw/0919fd5d2e4b2e5fa5563c6692abcb42245fe8fd/Documents/Arch_Diagram_17_Jul.jpg)\r\n\r\n## Stabilization procedure\r\nWhen a client runs the wrapper script for stabilization, the client spawns a\r\ndocker container with a minimal gentoo system. The system requests a package\r\nname from the server. When faced with this request, server evaluates the DAG\r\nof the packages and returns a leaf node. \r\n\r\nNote that every package node has multiple USE flag combinations set in. The\r\nserver selects one, and sends the data to the client. The client sets portage\r\nsettings to those USE flags and runs the merge of that package. The client\r\nmerge stops in case of any errors, or continues till the build is over in case\r\nthere aren't any. After the build, all the logs, as well as the build output is\r\ntarred, and uploaded to the server.\r\n\r\nFor the upload request, server generates a time limited upload token for the\r\nopenstack storage, and gives it to the client. Once the logs are uploaded, the\r\nserver marks the package in the tree STABLE/UNSTABLE, depending on what was\r\nreported.\r\n\r\n\r\n## Scope and future work\r\nWork on this project is far from over. The server currently can help stabilize\r\npackages based on USE flags only. There are a lot more variables involved when\r\nworking with Gentoo. Things like architecture, python_targets, ruby_targets can\r\nstill cause unforeseen problems, and the task is to modify the server to make\r\nthe testing generic, irrespective of what the factors of testing be.\r\n\r\n## Thanks\r\nI have no words that can describe how grateful I am to my mentors - [Sebastien\r\nFabbro](https://wiki.gentoo.org/wiki/User:Bicatali) and [Nitin\r\nAgarwal](https://plus.google.com/u/0/+NitinAgarwal3006/about) - for all their\r\nsupport, for being extremely responsive and helpful with every one of my\r\nproblems. Without their vote of confidence, this project would've been a lot\r\nharder and a lot less fun to do.\r\n\r\nI would be lucky to get to work with them further as I continue work on this\r\nproject and try to get it accepted as an official Gentoo Project.\r\n\r\nI am also thankful to Gentoo Organisation for the opprtunity to work on this project,\r\nwhich helped me learn a lot in such a short period.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}